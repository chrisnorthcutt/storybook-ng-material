{
    "pipes": [],
    "interfaces": [
        {
            "name": "Fruit",
            "id": "interface-Fruit-bdf6169a196bdf292f6f6df6527bc4452a72f7a3dce80c91b0eca18067daf9b8eb4032e43774ae63d8e0dbb1e0975a0ffab8c91e3efadeeb9b071dac06595960",
            "file": "src/app/chip-list/chip-list.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {MatChipInputEvent} from '@angular/material/chips';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\nexport interface Fruit {\n  name: string;\n}\nexport interface Vegetable {\n  name: string;\n}\n\n@Component({\n  selector: 'app-chip-list',\n  templateUrl: './chip-list.component.html',\n  styleUrls: ['./chip-list.component.scss']\n})\nexport class ChipListComponent implements OnInit {\n  addOnBlur = true;\n  readonly separatorKeysCodes = [ENTER, COMMA] as const;\n  fruits: Fruit[] = [{name: 'Lemon'}, {name: 'Lime'}, {name: 'Apple'}];\n\n  add(event: MatChipInputEvent): void {\n    const value = (event.value || '').trim();\n\n    // Add our fruit\n    if (value) {\n      this.fruits.push({name: value});\n    }\n\n    // Clear the input value\n\n    if (event.input) {\n      event.input.value = '';\n    }\n  }\n\n  remove(fruit: Fruit): void {\n    const index = this.fruits.indexOf(fruit);\n\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n    }\n  }\n  constructor() { }\n\n  ngOnInit() {\n  }\n@Input()\nType: string[] = ['basic', 'input', 'drag']\n\n\nvegetables: Vegetable[] = [\n  {name: 'apple'},\n  {name: 'banana'},\n  {name: 'strawberry'},\n  {name: 'orange'},\n  {name: 'kiwi'},\n  {name: 'cherry'},\n];\n\ndrop(event: CdkDragDrop<Vegetable[]>) {\n  moveItemInArray(this.vegetables, event.previousIndex, event.currentIndex);\n}\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        },
        {
            "name": "Vegetable",
            "id": "interface-Vegetable-bdf6169a196bdf292f6f6df6527bc4452a72f7a3dce80c91b0eca18067daf9b8eb4032e43774ae63d8e0dbb1e0975a0ffab8c91e3efadeeb9b071dac06595960",
            "file": "src/app/chip-list/chip-list.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {MatChipInputEvent} from '@angular/material/chips';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\nexport interface Fruit {\n  name: string;\n}\nexport interface Vegetable {\n  name: string;\n}\n\n@Component({\n  selector: 'app-chip-list',\n  templateUrl: './chip-list.component.html',\n  styleUrls: ['./chip-list.component.scss']\n})\nexport class ChipListComponent implements OnInit {\n  addOnBlur = true;\n  readonly separatorKeysCodes = [ENTER, COMMA] as const;\n  fruits: Fruit[] = [{name: 'Lemon'}, {name: 'Lime'}, {name: 'Apple'}];\n\n  add(event: MatChipInputEvent): void {\n    const value = (event.value || '').trim();\n\n    // Add our fruit\n    if (value) {\n      this.fruits.push({name: value});\n    }\n\n    // Clear the input value\n\n    if (event.input) {\n      event.input.value = '';\n    }\n  }\n\n  remove(fruit: Fruit): void {\n    const index = this.fruits.indexOf(fruit);\n\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n    }\n  }\n  constructor() { }\n\n  ngOnInit() {\n  }\n@Input()\nType: string[] = ['basic', 'input', 'drag']\n\n\nvegetables: Vegetable[] = [\n  {name: 'apple'},\n  {name: 'banana'},\n  {name: 'strawberry'},\n  {name: 'orange'},\n  {name: 'kiwi'},\n  {name: 'cherry'},\n];\n\ndrop(event: CdkDragDrop<Vegetable[]>) {\n  moveItemInArray(this.vegetables, event.previousIndex, event.currentIndex);\n}\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-d83b95cb897fd7f1ecc7216a31a9167598810a902c9c43ec11b6a93965548994186b900fe348e64bdf35a97b36d2fdb26731097dc1738e7f73bc67d2d432a47c",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        131
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0b9afe9226eba848e3934d4e524093fc1551a6d89738d316dd68089be23723007455229a4c256ae0189f08b58264fe3134608563e4a7187c075c714953c13b85",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'storybook-ng-material'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'storybook-ng-material';\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../styles.scss'",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-card class=\"example-card\">\n  <mat-card-header>\n    <div mat-card-avatar class=\"example-header-image\"></div>\n    <mat-card-title>Shiba Inu</mat-card-title>\n    <mat-card-subtitle>Dog Breed</mat-card-subtitle>\n  </mat-card-header>\n  <img mat-card-image src=\"https://material.angular.io/assets/img/examples/shiba2.jpg\" alt=\"Photo of a Shiba Inu\">\n  <mat-card-content>\n    <p>\n      The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\n      A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\n      bred for hunting.\n    </p>\n  </mat-card-content>\n  <mat-card-actions>\n    <button mat-button>LIKE</button>\n    <button mat-button>SHARE</button>\n  </mat-card-actions>\n</mat-card>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-1f7590843040488db9ca9cb9a02ac9c532bf0adfb15c9ad04ce0ae5c00d76415e8e707f10c1ebb3291a217e7f4cc3176176f4e526353d9673a6224bc784ff5d1",
            "file": "src/app/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "Disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "Label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "Type",
                    "defaultValue": "['mat-raised-button', 'mat-stroked-button', 'mat-button']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss'],\n})\nexport class ButtonComponent {\n  @Input()\n  Label: string;\n  @Input()\n  Type: string[] = ['mat-raised-button', 'mat-stroked-button', 'mat-button'];\n  @Input()\n  Disabled: boolean;\n  @Input()\n  iconLeft: boolean;\n  @Input()\n  iconRight: boolean;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-card {\n    max-width: 300px;\n}",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button mat-raised-button *ngIf=\"Type === 'mat-raised-button'\" color=\"primary\" disabled={{Disabled}}><mat-icon *ngIf=\"iconLeft\">save</mat-icon>{{Label}}<mat-icon *ngIf=\"iconRight\">save</mat-icon></button>\n<button mat-stroked-button *ngIf=\"Type === 'mat-stroked-button'\" color=\"primary\" disabled={{Disabled}}><mat-icon *ngIf=\"iconLeft\">save</mat-icon>{{Label}}<mat-icon *ngIf=\"iconRight\">save</mat-icon></button>\n<button mat-button *ngIf=\"Type === 'mat-button'\" color=\"primary\" disabled={{Disabled}}><mat-icon *ngIf=\"iconLeft\">save</mat-icon>{{Label}}<mat-icon *ngIf=\"iconRight\">save</mat-icon></button>\n  "
        },
        {
            "name": "ButtonToggleComponent",
            "id": "component-ButtonToggleComponent-0b23bc3f1d0b1e15dd97109813cf5ad4af4db0f8e27ecde1891e1952635ee2c93e99a9ed564c2fdba93626d1c75c5c523fb91be216804dd6e14f223a12f7488a",
            "file": "src/app/button-toggle/button-toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-toggle",
            "styleUrls": [
                "./button-toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "Label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "Options",
                    "defaultValue": "[\"Option 1\", \"Option 2\", \"Option 3\"]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "selectMultiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-button-toggle',\n  templateUrl: './button-toggle.component.html',\n  styleUrls: ['./button-toggle.component.scss'],\n})\nexport class ButtonToggleComponent {\n  @Input()\n  Options: string[] = [\"Option 1\", \"Option 2\", \"Option 3\"]\n  @Input()\n  Label: string;\n  @Input()\n  selectMultiple: boolean;\n\n \n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-card {\n    max-width: 300px;\n}",
                    "styleUrl": "./button-toggle.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-button-toggle-group name=\"fontStyle\" aria-label=\"Font Style\" [multiple]=\"selectMultiple\">\n    <mat-button-toggle *ngFor=\"let item of Options\" value=\"bold\">{{item}}</mat-button-toggle>\n\n  </mat-button-toggle-group>"
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-c072312671a50b4ab71e69f36cdd2a01f5cb2bcce82c591c85f3dc0dbee0fdd89bd8857b43272524526f5a1f91f15350e2e63729d04554e9aa9b1519a73f3626",
            "file": "src/app/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "Action1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "Action2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "imageSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "Title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-card',\n  templateUrl: './card.component.html',\n  styleUrls: ['./card.component.scss']\n})\nexport class CardComponent  {\n\n  @Input() \n  Title:string\n\n  @Input()\n  Action1:string\n\n  @Input()\n  Action2:string\n\n  @Input()\n  imageSrc:string\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-card {\n    max-width: 300px;\n}",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-card class=\"example-card\">\n    <mat-card-header>\n      <div mat-card-avatar class=\"example-header-image\"></div>\n      <mat-card-title>{{Title}}</mat-card-title>\n      <mat-card-subtitle>Dog Breed</mat-card-subtitle>\n    </mat-card-header>\n    <img mat-card-image [src]=\"imageSrc\" alt=\"Photo of a Shiba Inu\">\n    <mat-card-content>\n      <p>\n        The Shiba Inu is the smallest of the six original and distinct spitz breeds of dog from Japan.\n        A small, agile dog that copes very well with mountainous terrain, the Shiba Inu was originally\n        bred for hunting.\n      </p>\n    </mat-card-content>\n    <mat-card-actions>\n      <button mat-button>{{Action1}}</button>\n      <button mat-button>{{Action2}}</button>\n    </mat-card-actions>\n  </mat-card>\n  "
        },
        {
            "name": "ChipListComponent",
            "id": "component-ChipListComponent-bdf6169a196bdf292f6f6df6527bc4452a72f7a3dce80c91b0eca18067daf9b8eb4032e43774ae63d8e0dbb1e0975a0ffab8c91e3efadeeb9b071dac06595960",
            "file": "src/app/chip-list/chip-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chip-list",
            "styleUrls": [
                "./chip-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./chip-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "Type",
                    "defaultValue": "['basic', 'input', 'drag']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addOnBlur",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "fruits",
                    "defaultValue": "[{name: 'Lemon'}, {name: 'Lime'}, {name: 'Apple'}]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Fruit[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "separatorKeysCodes",
                    "defaultValue": "[ENTER, COMMA] as const",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "vegetables",
                    "defaultValue": "[\n  {name: 'apple'},\n  {name: 'banana'},\n  {name: 'strawberry'},\n  {name: 'orange'},\n  {name: 'kiwi'},\n  {name: 'cherry'},\n]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Vegetable[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatChipInputEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatChipInputEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Vegetable[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<Vegetable[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "fruit",
                            "type": "Fruit",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fruit",
                            "type": "Fruit",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport {COMMA, ENTER} from '@angular/cdk/keycodes';\nimport {MatChipInputEvent} from '@angular/material/chips';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\nexport interface Fruit {\n  name: string;\n}\nexport interface Vegetable {\n  name: string;\n}\n\n@Component({\n  selector: 'app-chip-list',\n  templateUrl: './chip-list.component.html',\n  styleUrls: ['./chip-list.component.scss']\n})\nexport class ChipListComponent implements OnInit {\n  addOnBlur = true;\n  readonly separatorKeysCodes = [ENTER, COMMA] as const;\n  fruits: Fruit[] = [{name: 'Lemon'}, {name: 'Lime'}, {name: 'Apple'}];\n\n  add(event: MatChipInputEvent): void {\n    const value = (event.value || '').trim();\n\n    // Add our fruit\n    if (value) {\n      this.fruits.push({name: value});\n    }\n\n    // Clear the input value\n\n    if (event.input) {\n      event.input.value = '';\n    }\n  }\n\n  remove(fruit: Fruit): void {\n    const index = this.fruits.indexOf(fruit);\n\n    if (index >= 0) {\n      this.fruits.splice(index, 1);\n    }\n  }\n  constructor() { }\n\n  ngOnInit() {\n  }\n@Input()\nType: string[] = ['basic', 'input', 'drag']\n\n\nvegetables: Vegetable[] = [\n  {name: 'apple'},\n  {name: 'banana'},\n  {name: 'strawberry'},\n  {name: 'orange'},\n  {name: 'kiwi'},\n  {name: 'cherry'},\n];\n\ndrop(event: CdkDragDrop<Vegetable[]>) {\n  moveItemInArray(this.vegetables, event.previousIndex, event.currentIndex);\n}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-chip-list {\n    width: 100%;\n    max-width: 600px;\n}\n\n.example-box.cdk-drag-animating {\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  }\n  \n  .example-chip .cdk-drop-list-dragging {\n    transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n  }",
                    "styleUrl": "./chip-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 44
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"mat-typography\">\n<mat-form-field *ngIf=\"Type === 'input'\" class=\"example-chip-list\" appearance=\"fill\">\n  <mat-label>Favorite Fruits</mat-label>\n  <mat-chip-list #chipList aria-label=\"Fruit selection\">\n    <mat-chip *ngFor=\"let fruit of fruits\" (removed)=\"remove(fruit)\">\n      {{fruit.name}}\n      <mat-icon matChipRemove >cancel</mat-icon>\n    </mat-chip>\n    <input placeholder=\"New fruit...\"\n           [matChipInputFor]=\"chipList\"\n           [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\n           [matChipInputAddOnBlur]=\"addOnBlur\"\n           (matChipInputTokenEnd)=\"add($event)\">\n  </mat-chip-list>\n</mat-form-field>\n\n\n<mat-chip-list *ngIf=\"Type === 'basic'\" aria-label=\"Fish selection\">\n  <mat-chip>Basic</mat-chip>\n  <mat-chip color=\"primary\" selected>Primary</mat-chip>\n  <mat-chip color=\"accent\" selected>Accent</mat-chip>\n</mat-chip-list>\n\n<mat-chip-list *ngIf=\"Type === 'drag'\"\n  class=\"example-chip\"\n  cdkDropList \n  cdkDropListOrientation=\"horizontal\"\n  (cdkDropListDropped)=\"drop($event)\">\n  <mat-chip\n    class=\"example-box\"\n    cdkDrag\n    *ngFor=\"let vegetable of vegetables\">\n    {{vegetable.name}}\n  </mat-chip>\n</mat-chip-list>\n</div>"
        },
        {
            "name": "ListComponent",
            "id": "component-ListComponent-249f38d83889809ae78add3fd7bc984aa6440ddc4aebded7e479c78888f9af7ad6dc2c0df3c651593b38b65052d1f87904a08231d953a3559524dd5fc0e48ecc",
            "file": "src/app/list/list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list",
            "styleUrls": [
                "./list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "groceryList",
                    "defaultValue": "['Bananas', 'Apple', 'Pears']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "headerLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string | \"Grocery List\"",
                    "decorators": []
                },
                {
                    "name": "selectionList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean | ",
                    "decorators": []
                },
                {
                    "name": "selectionMultiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean | ",
                    "decorators": []
                },
                {
                    "name": "showAvatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean | ",
                    "decorators": []
                },
                {
                    "name": "showHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean | ",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss'],\n})\nexport class ListComponent {\n  @Input()\n  groceryList: string[] = ['Bananas', 'Apple', 'Pears'];\n  @Input()\n  showHeader: boolean | true;\n  @Input()\n  headerLabel: string | 'Grocery List';\n  @Input()\n  selectionList: boolean | false;\n\n  @Input()\n  selectionMultiple: boolean | false;\n\n  @Input()\n  showAvatar: boolean | false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-card {\n    max-width: 300px;\n}",
                    "styleUrl": "./list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div *ngIf=\"selectionList === false\">\n  <mat-list role=\"list\">\n    <div mat-subheader *ngIf=\"showHeader\">{{ headerLabel }}</div>\n    <mat-list-item role=\"listitem\" *ngFor=\"let item of groceryList\">\n      <img\n        matListAvatar\n        *ngIf=\"showAvatar\"\n        src=\"https://media.istockphoto.com/vectors/thumbnail-image-vector-graphic-vector-id1147544807?k=20&m=1147544807&s=612x612&w=0&h=pBhz1dkwsCMq37Udtp9sfxbjaMl27JUapoyYpQm0anc=\"\n        alt=\"...\"\n      />\n      <h3 matLine>{{ item }}</h3>\n      <h3 matLine>Line 2</h3>\n    </mat-list-item>\n  </mat-list>\n</div>\n\n<div *ngIf=\"selectionList && selectionMultiple\">\n  <mat-selection-list>\n    <div mat-subheader *ngIf=\"showHeader\">{{ headerLabel }}</div>\n    <mat-list-option *ngFor=\"let item of groceryList\">\n      <img\n        matListAvatar\n        *ngIf=\"showAvatar\"\n        src=\"https://media.istockphoto.com/vectors/thumbnail-image-vector-graphic-vector-id1147544807?k=20&m=1147544807&s=612x612&w=0&h=pBhz1dkwsCMq37Udtp9sfxbjaMl27JUapoyYpQm0anc=\"\n        alt=\"...\"\n      />\n      <h3 matLine>{{ item }}</h3>\n    </mat-list-option>\n  </mat-selection-list>\n</div>\n<div *ngIf=\"selectionList && !selectionMultiple\">\n  <mat-selection-list [multiple]=\"false\">\n    <div mat-subheader *ngIf=\"showHeader\">{{ headerLabel }}</div>\n    <mat-list-option *ngFor=\"let item of groceryList\">\n      <img\n        matListAvatar\n        *ngIf=\"showAvatar\"\n        src=\"https://media.istockphoto.com/vectors/thumbnail-image-vector-graphic-vector-id1147544807?k=20&m=1147544807&s=612x612&w=0&h=pBhz1dkwsCMq37Udtp9sfxbjaMl27JUapoyYpQm0anc=\"\n        alt=\"...\"\n      />\n      <h3 matLine>{{ item }}</h3>\n    </mat-list-option>\n  </mat-selection-list>\n</div>\n"
        },
        {
            "name": "MetricContainerComponent",
            "id": "component-MetricContainerComponent-79942572c31d707c59ea46a8c3aea189dc8554a2679cd573de81f2855ffa86284472edc7cf5956fa6982576ccc17873bd913f07163791a647bac077c545ef7b8",
            "file": "src/app/metric-container/metric-container.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "core-metric-container",
            "styleUrls": [
                "./metric-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./metric-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'core-metric-container',\n  templateUrl: './metric-container.component.html',\n  styleUrls: ['./metric-container.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MetricContainerComponent { \n\n  @Input()\n  icon: string\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// background colors\n$bg1: #f5f6f7;\n$bg2: #ecedee;\n$bg3: #e1e3e5;\n\n// white\n$phaas-white: #ffffff;\n$phaas-white-light: rgba($phaas-white, 0.50);\n$phaas-white-lighter: rgba($phaas-white, 0.20);\n$phaas-white-lightest: rgba($phaas-white, 0.12);\n\n// black\n$phaas-black: #0c0916;\n$phaas-black-light: rgba($phaas-black, 0.50);\n$phaas-black-lighter: rgba($phaas-black, 0.20);\n$phaas-black-lightest: rgba($phaas-black, 0.12);\n\n// ink - should only be used for fonts\n$phaas-ink-normal: rgba($phaas-black, 0.8);\n$phaas-ink-secondary: rgba($phaas-black, 0.6);\n$phaas-ink-disabled: rgba($phaas-black, 0.38);\n\n// gray\n$phaas-gray: #575c60;\n$phaas-gray-light: lighten($phaas-gray, 25%);\n$phaas-gray-lighter: lighten($phaas-gray, 55%);\n$phaas-gray-lightest: lighten($phaas-gray, 60%);\n\n// blue\n$phaas-blue: #2e729f;\n$phaas-blue-darker: darken($phaas-blue, 30%);\n$phaas-blue-dark: darken($phaas-blue, 15%);\n$phaas-blue-light: lighten($phaas-blue, 25%);\n$phaas-blue-lighter: lighten($phaas-blue, 50%);\n$phaas-blue-lightest: lighten($phaas-blue, 55%);\n\n$phaas-brand-blue: #337daf;\n\n// teal\n$phaas-teal: #4ac0b2;\n$phaas-teal-darker: darken($phaas-teal, 30%);\n$phaas-teal-dark: darken($phaas-teal, 15%);\n$phaas-teal-light: lighten($phaas-teal, 25%);\n$phaas-teal-lighter: lighten($phaas-teal, 40%);\n\n$phaas-brand-teal: #4ab0b2;\n\n// red\n$phaas-red: #c84026;\n$phaas-red-darker: darken($phaas-red, 30%);\n$phaas-red-dark: darken($phaas-red, 15%);\n$phaas-red-light: lighten($phaas-red, 25%);\n$phaas-red-lighter: lighten($phaas-red, 40%);\n\n// yellow\n$phaas-yellow: #f2be28;\n$phaas-yellow-darker: darken($phaas-yellow, 30%);\n$phaas-yellow-dark: darken($phaas-yellow, 15%);\n$phaas-yellow-light: lighten($phaas-yellow, 25%);\n$phaas-yellow-lighter: lighten($phaas-yellow, 40%);\n\n// green\n$phaas-green: #58cc88;\n$phaas-green-darker: darken($phaas-green, 30%);\n$phaas-green-dark: darken($phaas-green, 15%);\n$phaas-green-light: lighten($phaas-green, 25%);\n$phaas-green-lighter: lighten($phaas-green, 40%);\n\n// gradients\n$phaas-horizontal-gradient: linear-gradient(90deg, $phaas-brand-blue 0%, $phaas-brand-teal 100%);\n$phaas-vertical-gradient: linear-gradient(180deg, $phaas-brand-blue 0%, $phaas-brand-teal 100%);\n$phaas-diagonal-gradient: linear-gradient(135deg, $phaas-brand-blue 0%, $phaas-brand-teal 100%);\n\n// analytics colors\n$phaas-analytics-blue: #0078B9;\n$phaas-analytics-blue-light: #A8C7EB;\n$phaas-analytics-orange: #FF7700;\n$phaas-analytics-orange-light: #FFB86B;\n$phaas-analytics-purple: #9D62C3;\n$phaas-analytics-purple-light: #CAAED8;\n$phaas-analytics-brown: #955348;\n$phaas-analytics-brown-light: #CD9C94;\n$phaas-analytics-pink: #F36DC6;\n$phaas-analytics-pink-light: #FFB2D3;\n$phaas-analytics-pistachio: #BBBF00;\n$phaas-analytics-pistachio-light: #DADC82;\n$phaas-analytics-teal: #00C1D2;\n$phaas-analytics-teal-light: #8DDCE7;\n$phaas-analytics-green: #45AD6D;\n$phaas-analytics-green-light: #B4E55E;\n$phaas-analytics-red: #E02020;\n$phaas-analytics-grey: #C7C7C7;\n\n$phaas-blue-palette: (50: #e6eef3,\n  100: #c0d5e2,\n  200: #97b9cf,\n  300: #6d9cbc,\n  400: #4d87ad,\n  500: #2e729f,\n  600: #296a97,\n  700: #235f8d,\n  800: #1d5583,\n  900: #124272,\n  A100: #a7d0ff,\n  A200: #74b4ff,\n  A400: #4199ff,\n  A700: #288bff,\n  contrast: (50: #000000,\n    100: #000000,\n    200: #000000,\n    300: #000000,\n    400: #ffffff,\n    500: #ffffff,\n    600: #ffffff,\n    700: #ffffff,\n    800: #ffffff,\n    900: #ffffff,\n    A100: #000000,\n    A200: #000000,\n    A400: #000000,\n    A700: #ffffff));\n\n$phaas-yellow-palette: (50: #fdf7e5,\n  100: #fbecbf,\n  200: #f9df94,\n  300: #f6d269,\n  400: #f4c848,\n  500: #f2be28,\n  600: #f0b824,\n  700: #eeaf1e,\n  800: #eca718,\n  900: #e8990f,\n  A100: #ffffff,\n  A200: #fff3e1,\n  A400: #ffdfae,\n  A700: #ffd595,\n  contrast: (50: #000000,\n    100: #000000,\n    200: #000000,\n    300: #000000,\n    400: #000000,\n    500: #000000,\n    600: #000000,\n    700: #000000,\n    800: #000000,\n    900: #000000,\n    A100: #000000,\n    A200: #000000,\n    A400: #000000,\n    A700: #000000));\n\n$phaas-red-palette: (50: #f8e8e5,\n  100: #efc6be,\n  200: #e4a093,\n  300: #d97967,\n  400: #d05d47,\n  500: #c84026,\n  600: #c23a22,\n  700: #bb321c,\n  800: #b42a17,\n  900: #a71c0d,\n  A100: #ffd8d5,\n  A200: #ffa9a2,\n  A400: #ff7a6f,\n  A700: #ff6256,\n  contrast: (50: #000000,\n    100: #000000,\n    200: #000000,\n    300: #000000,\n    400: #ffffff,\n    500: #ffffff,\n    600: #ffffff,\n    700: #ffffff,\n    800: #ffffff,\n    900: #ffffff,\n    A100: #000000,\n    A200: #000000,\n    A400: #000000,\n    A700: #000000));\n\n    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');\n\n.metric-container {\n  font-family: 'Inter';\n  color: rgba($phaas-black, 0.8);\n  display: inline-flex;\n  flex-direction: row;\n  padding: 16px;\n  border-radius: 6px;\n  align-items: center;\n  width: auto;\n  min-width: 400px;\n  box-shadow: 0px 8px 15px -4px #34435e3d;\n  gap: 24px;\n\n}\n\n.metric-container__icon {\n  height: 48px;\n  width: 48px;\n  border-radius: 100%;\n  color: $phaas-blue;\n  background-color: $phaas-blue-lightest;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  \n}\n\n.metric-container__content {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n}\n\n.metric-container__title {\n  font-size: 12px;\n height: 24px;\n  padding-bottom: 2px;\n  text-transform: uppercase;\n  font-weight: 600;\n  color:rgba($phaas-black, 0.6)\n}\n\n.metric-container__metric {\n  margin: 0;\n  font-size: 24px;\n  font-weight: 700;\n  line-height: 1.125\n}\n\n.metric-container__description {\n  margin-top: 12px;\n  font-size: 12px;\n  text-align: center;\n  color:rgba($phaas-black, 0.6)\n}\n\n.metric-container__description:empty {\n  margin-top: 0px;\n}",
                    "styleUrl": "./metric-container.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"metric-container\">\n  <div class=\"metric-container__icon\">\n    <mat-icon>{{icon}}</mat-icon>\n  </div>\n  <div class=\"metric-container__content\">\n    <div class=\"metric-container__title\">\n      <ng-content select=\"[title]\"></ng-content>\n    </div>\n    <div class=\"metric-container__metric\">\n      <ng-content select=\"[metric]\"></ng-content>\n    </div>\n    <div class=\"metric-container__description\">\n      <ng-content select=\"[description]\"></ng-content>\n    </div>\n  </div>\n \n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-643f64c033280803aa1c42bca3f41d1de3feddffa38a4274b601ec70373c56e50e1b53ab28fb1b0633b78614c7ae881f0de745eadd99ad1551cee979f9a5b8d1",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ProgressBarComponent",
            "id": "component-ProgressBarComponent-a29aeb3db711f4111304f9ce5d008c86c28a62384f647832194a672e45abb1fc269d79112ff6aa9182a3e76c7b3bf4f8d8d315395a91c8107cb0c3cfd6a6f043",
            "file": "src/app/progress-bar/progress-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bufferValue",
                    "defaultValue": "60",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n",
                    "description": "<p>ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode</p>\n",
                    "line": 32,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Color - primary (Theme color) | accent | warn\n",
                    "description": "<p>ProgressBar Color - primary (Theme color) | accent | warn</p>\n",
                    "line": 38,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'determinate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar mode - determinate | indeterminate | Buffer | Query\n",
                    "description": "<p>ProgressBar mode - determinate | indeterminate | Buffer | Query</p>\n",
                    "line": 20,
                    "type": "ProgressBarMode",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n",
                    "description": "<p>ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes</p>\n",
                    "line": 26,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core';\nimport { ProgressBarMode } from '@angular/material/progress-bar';\n@Component({\n  selector: 'app-progress-bar',\n  templateUrl: './progress-bar.component.html',\n  styleUrls: ['./progress-bar.component.scss']\n})\nexport class ProgressBarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n    /**\n   * ProgressBar mode - determinate | indeterminate | Buffer | Query\n   */\n     @Input()\n     mode: ProgressBarMode = 'determinate';\n   \n     /**\n      * ProgressBar Value (0 -100) - Applicable only for Determinate and Buffer modes\n      */\n     @Input()\n     value: number = 40;\n   \n      /**\n      * ProgressBar BufferValue (0 -100) - Applicable only for Buffer mode\n      */\n     @Input()\n     bufferValue: number = 60;\n   \n     /**\n      * ProgressBar Color - primary (Theme color) | accent | warn\n      */\n     @Input()\n     color: ThemePalette = 'primary';\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-progress-bar \n    [mode]=\"mode\"\n    [value]=\"value\"\n    [bufferValue]=\"bufferValue\"\n    [color]=\"color\">\n</mat-progress-bar>\n"
        },
        {
            "name": "StepperComponent",
            "id": "component-StepperComponent-bd91b7b053e077fa22f9125886281def66aa0e69bd8c9b5117587da22a89f39b453dbd6a9b976142d356a96d8b72c320f31a8587404c40070b3727dc84815be9",
            "file": "src/app/stepper/stepper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stepper",
            "styleUrls": [
                "./stepper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stepper.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "firstFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isLinear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "secondFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\n\n@Component({\n  selector: 'app-stepper',\n  templateUrl: './stepper.component.html',\n  styleUrls: ['./stepper.component.scss'],\n\n})\nexport class StepperComponent  implements OnInit {\n  isLinear = false;\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n\n  constructor(private _formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.firstFormGroup = this._formBuilder.group({\n      firstCtrl: ['', Validators.required]\n    });\n    this.secondFormGroup = this._formBuilder.group({\n      secondCtrl: ['', Validators.required]\n    });\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./stepper.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "_formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-horizontal-stepper linear #stepper>\n    <mat-step [stepControl]=\"firstFormGroup\">\n      <form [formGroup]=\"firstFormGroup\">\n        <ng-template matStepLabel>Fill out your name</ng-template>\n        <mat-form-field>\n          <mat-label>Name</mat-label>\n          <input matInput placeholder=\"Last name, First name\" formControlName=\"firstCtrl\" required>\n        </mat-form-field>\n        <div>\n          <button mat-button matStepperNext>Next</button>\n        </div>\n      </form>\n    </mat-step>\n    <mat-step [stepControl]=\"secondFormGroup\" label=\"Fill out your address\">\n      <form [formGroup]=\"secondFormGroup\">\n        <mat-form-field>\n          <mat-label>Address</mat-label>\n          <input matInput formControlName=\"secondCtrl\" placeholder=\"Ex. 1 Main St, New York, NY\"\n                 required>\n        </mat-form-field>\n        <div>\n          <button mat-button matStepperPrevious>Back</button>\n          <button mat-button matStepperNext>Next</button>\n        </div>\n      </form>\n    </mat-step>\n    <mat-step>\n      <ng-template matStepLabel>Done</ng-template>\n      <p>You are now done.</p>\n      <div>\n        <button mat-button matStepperPrevious>Back</button>\n        <button mat-button (click)=\"stepper.reset()\">Reset</button>\n      </div>\n    </mat-step>\n  </mat-horizontal-stepper>"
        },
        {
            "name": "TypeComponent",
            "id": "component-TypeComponent-2e7121a70b69ef89d1b62f39b00362db493185bcc9050e970c144f72c88b57878612d461dfd451213f893707ac93a1ec3dd2e00f4c83abf337079b9c8e215e46",
            "file": "src/app/type/type.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-type",
            "styleUrls": [
                "./type.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./type.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-type',\n  templateUrl: './type.component.html',\n  styleUrls: ['./type.component.scss']\n})\nexport class TypeComponent  {\n\n  @Input() \n  label:string\n\n  @Input()\n  style:string\n\n}\n\nexport const argTypes = {\n  label: {\n    name: 'label',\n    type: { name: 'string', required: false },\n    defaultValue: 'Hello',\n    description: 'demo description',\n    table: {\n      type: { summary: 'string' },\n      defaultValue: { summary: 'Hello' },\n    },\n    control: {\n      type: 'text'\n    }\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".example-card {\n    max-width: 300px;\n}",
                    "styleUrl": "./type.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p [class]=\"style\">{{label}}</p>\n  "
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-8105731902948cfe2d2c382a01b8ec58454ae5ee4cadc7e0428f9f6a73d0de3128a57199168dcde82246dcdafed6008d391dc92475f08762f1cca2cc7a4014d9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\nimport { ProgressBarComponent } from './progress-bar/progress-bar.component';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport { StepperComponent } from './stepper/stepper.component';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatInputModule} from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport {MatCardModule} from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport {MAT_FORM_FIELD_DEFAULT_OPTIONS} from '@angular/material/form-field';\nimport { DemoMaterialModule } from './material.module';\nimport { MatListModule } from '@angular/material/list';\nimport {MatChipsModule, MAT_CHIPS_DEFAULT_OPTIONS} from '@angular/material/chips';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\n\n\n\n\nimport {MatFormFieldModule} from '@angular/material/form-field'; \nimport { FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { CardComponent } from './card/card.component' \nimport { MetricContainerModule } from './metric-container';\nimport { ListComponent } from './list/list.component';\nimport { ButtonComponent } from './button/button.component';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { ButtonToggleComponent } from './button-toggle/button-toggle.component';\nimport { ChipListComponent } from './chip-list/chip-list.component';\nimport { ENTER, COMMA } from '@angular/cdk/keycodes';\n\n@NgModule({\n  declarations: [\t\n    AppComponent,\n    ProgressBarComponent,\n    StepperComponent,\n    CardComponent,\n    ListComponent,\n    ButtonComponent,\n    ButtonToggleComponent,\n      ChipListComponent\n   ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatProgressBarModule,\n    MatStepperModule,\n    MatFormFieldModule,\n    MatInputModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatIconModule,\n    NoopAnimationsModule,\n    MatCardModule,\n    MatButtonModule,\n    DemoMaterialModule,\n    MetricContainerModule,\n    MatListModule,\n    MatButtonToggleModule,\n    MatChipsModule,\n    DragDropModule\n\n  ],\n  providers: [\n    { provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: 'fill' } },\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER, COMMA]\n      }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "ButtonToggleComponent"
                        },
                        {
                            "name": "CardComponent"
                        },
                        {
                            "name": "ChipListComponent"
                        },
                        {
                            "name": "ListComponent"
                        },
                        {
                            "name": "ProgressBarComponent"
                        },
                        {
                            "name": "StepperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DemoMaterialModule"
                        },
                        {
                            "name": "MetricContainerModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DemoMaterialModule",
            "id": "module-DemoMaterialModule-e6481f2c053676b8b7fe5e529d6e3e5a570f63e3d11d408af87e87d03dd2039db411b6109b5c94da9381725be738a1197af1d3e81a818b6920a7e06f6d7158fa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/material.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {ClipboardModule} from '@angular/cdk/clipboard';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {OverlayModule} from '@angular/cdk/overlay';\n\n@NgModule({\n  exports: [\n    A11yModule,\n    ClipboardModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    BrowserAnimationsModule,\n    DragDropModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    OverlayModule,\n    PortalModule,\n    ScrollingModule,\n  ]\n})\nexport class DemoMaterialModule {}\n\n\n/**  Copyright 2020 Google LLC. All Rights Reserved.\n    Use of this source code is governed by an MIT-style license that\n    can be found in the LICENSE file at http://angular.io/license */",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MetricContainerModule",
            "id": "module-MetricContainerModule-59f4817f54ddb34206a2e31654fd9e13085756f4e03211b328378f9197fd7a34c9058bab14fc94aeada2cad73c336a01b50e8f08b448e22b8d6b831115aa7b21",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/metric-container/metric-container.module.ts",
            "methods": [],
            "sourceCode": "import { Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MetricContainerComponent } from './metric-container.component';\nimport { MatIconModule } from '@angular/material/icon';\n\n@NgModule({\n  declarations: [\n    MetricContainerComponent\n  ],\n  imports: [\n    CommonModule,\n    MatIconModule\n  ],\n  exports: [\n    MetricContainerComponent\n  ]\n})\nexport class MetricContainerModule {\n\n }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MetricContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MetricContainerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "argTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/type/type.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  label: {\n    name: 'label',\n    type: { name: 'string', required: false },\n    defaultValue: 'Hello',\n    description: 'demo description',\n    table: {\n      type: { summary: 'string' },\n      defaultValue: { summary: 'Hello' },\n    },\n    control: {\n      type: 'text'\n    }\n  }\n}"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button-Toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ListTemplate.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Metriccard.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "basicList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/List.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Buffer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Progressbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Determinate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Progressbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Drag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ListTemplate.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "exampleWithKnobs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    Label: text('Label', 'Hello Storybook'), // The first param of the knob function has to be exactly the same as the component input.\n  },\n})"
            },
            {
                "name": "Full",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Horizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Indeterminate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Progressbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Input",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "ListTemplate.bind({})"
            },
            {
                "name": "ListTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ChipListComponent>",
                "defaultValue": "(args: ChipListComponent) => ({\n\n  props: args,\n})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Multiple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button-Toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Query",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Progressbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "selectionList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/List.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectionListSingle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/List.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button-Toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonToggleComponent>",
                "defaultValue": "(args: ButtonToggleComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CardComponent>",
                "defaultValue": "(args: CardComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/List.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ListComponent>",
                "defaultValue": "(args: ListComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Metriccard.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<MetricContainerComponent>",
                "defaultValue": "(args: MetricContainerComponent) => ({\n    template: `    <core-metric-container [icon]=\"icon\">\n    <div title>{{title}}</div>\n    <div metric>{{metric}}</div>\n    <div description>{{description}}</div>\n</core-metric-container>`,\n    props: args,\n  })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Progressbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ProgressBarComponent>",
                "defaultValue": "(args: ProgressBarComponent) => ({\n    props: args,\n  })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Stepper.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<StepperComponent>",
                "defaultValue": "(args: StepperComponent) => ({\n    props: args,\n  })"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/type/type.component.ts": [
                {
                    "name": "argTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/type/type.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  label: {\n    name: 'label',\n    type: { name: 'string', required: false },\n    defaultValue: 'Hello',\n    description: 'demo description',\n    table: {\n      type: { summary: 'string' },\n      defaultValue: { summary: 'Hello' },\n    },\n    control: {\n      type: 'text'\n    }\n  }\n}"
                }
            ],
            "src/stories/Button-Toggle.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button-Toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Multiple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button-Toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button-Toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonToggleComponent>",
                    "defaultValue": "(args: ButtonToggleComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Chip.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ListTemplate.bind({})"
                },
                {
                    "name": "Drag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ListTemplate.bind({})"
                },
                {
                    "name": "Input",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "ListTemplate.bind({})"
                },
                {
                    "name": "ListTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ChipListComponent>",
                    "defaultValue": "(args: ChipListComponent) => ({\n\n  props: args,\n})"
                }
            ],
            "src/stories/Metriccard.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Metriccard.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Metriccard.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<MetricContainerComponent>",
                    "defaultValue": "(args: MetricContainerComponent) => ({\n    template: `    <core-metric-container [icon]=\"icon\">\n    <div title>{{title}}</div>\n    <div metric>{{metric}}</div>\n    <div description>{{description}}</div>\n</core-metric-container>`,\n    props: args,\n  })"
                }
            ],
            "src/stories/List.stories.ts": [
                {
                    "name": "basicList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/List.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "selectionList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/List.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "selectionListSingle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/List.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/List.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ListComponent>",
                    "defaultValue": "(args: ListComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Progressbar.stories.ts": [
                {
                    "name": "Buffer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Progressbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Determinate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Progressbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Indeterminate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Progressbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Query",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Progressbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Progressbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ProgressBarComponent>",
                    "defaultValue": "(args: ProgressBarComponent) => ({\n    props: args,\n  })"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "exampleWithKnobs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    Label: text('Label', 'Hello Storybook'), // The first param of the knob function has to be exactly the same as the component input.\n  },\n})"
                }
            ],
            "src/stories/Card.stories.ts": [
                {
                    "name": "Full",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CardComponent>",
                    "defaultValue": "(args: CardComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Stepper.stories.ts": [
                {
                    "name": "Horizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Stepper.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<StepperComponent>",
                    "defaultValue": "(args: StepperComponent) => ({\n    props: args,\n  })"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/button-toggle/button-toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/chip-list/chip-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChipListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/chip-list/chip-list.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Fruit",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/chip-list/chip-list.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Vegetable",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/list/list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/metric-container/metric-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetricContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressBarComponent",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/stepper/stepper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StepperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/type/type.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TypeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/type/type.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "argTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button-Toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button-Toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Multiple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button-Toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleWithKnobs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Full",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Drag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Input",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ListTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/List.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "basicList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/List.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectionList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/List.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectionListSingle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/List.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Metriccard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Metriccard.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Progressbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Buffer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Progressbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Determinate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Progressbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Indeterminate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Progressbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Query",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Progressbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Horizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Stepper.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}